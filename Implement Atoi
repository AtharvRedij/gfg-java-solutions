class Solution
{
    int atoi(String str) {
	  int result = 0, power = 0, i;
	  
	  for(i = str.length() - 1; i >= 0; i--) {
	      try {
	          String ch = str.charAt(i) + "";
	          if(ch.equals("-")) {
	              result *= -1;
	              i--;
	              break;
	          } else {
	              int digit = Integer.parseInt(ch);
        	      result += (int) (digit * Math.pow(10, power));
        	      power++;
	          }
	          
	      } catch (NumberFormatException e) {
	          return -1;
	      }
	      
	  }
	  
      // false means there are chars left to process
      // cases like --100 or 1-23  
	  if(i != -1) return -1;
	  
	  return result;
    }
}

// Recursive
class Solution {
  int convert(String s, int lastIndex, int currentIndex) {

    if (currentIndex > lastIndex) {
      return 0;
    } else {
      String ch = s.charAt(currentIndex) + "";
      int answer = convert(s, lastIndex, currentIndex + 1);

      if (ch.equals("-")) {
        if (currentIndex != 0) {
          throw new NumberFormatException("Invalid");
        } else {
          return answer * -1;
        }
      }

      int digit = Integer.parseInt(ch);
      int base = (int)(digit * Math.pow(10, lastIndex - currentIndex));
      int result = base + answer;
      return result;
    }
  }

  int atoi(String str) {
    try {
      return convert(str, str.length() - 1, 0);
    } catch (NumberFormatException e) {
      return -1;
    }
  }
}
