class Solution
{
    int search(int arr[], int n, int start, int end) {
        if (end < start) {
            return -1;
        }
        
        int mid = start + (end - start) / 2;
        // System.out.println("Calc MID index " + mid);
        
        if( mid > 0 && mid < n-1 && arr[mid] >= arr[mid-1] && arr[mid] >= arr[mid+1] ) {
            // System.out.println("1 MID index " + mid + " value " + arr[mid]);
            return mid;
        }
        else if (mid == 0 && mid == n-1) {
            // System.out.println("2 MID index " + mid + " value " + arr[mid]);
            return mid;
        }
        else if(mid == 0 && arr[mid] >= arr[mid+1]) {
            // System.out.println("3 MID index " + mid + " value " + arr[mid]);
            return mid;
        }
        else if(mid == n-1 && arr[mid] >= arr[mid-1]) {
            // System.out.println("4 MID index " + mid + " value " + arr[mid]);
            return mid;
        }
        
        if(mid > 0 && arr[mid-1] > arr[mid])
          return search(arr, n, start, mid-1);
        else
          return search(arr, n, mid+1, end);
        
        
        
    }
    
	// Function to find the peak element
	// arr[]: input array
	// n: size of array a[]
	public int peakElement(int[] arr,int n)
    {
        int peakIndex = search(arr, n, 0, n-1);
        // System.out.println("Peak index is" + peakIndex);
       return peakIndex;
    }
}
